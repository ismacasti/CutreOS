/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


package gui;

import cutreos.CutreOS;
import cutreos.OSisFullException;
import cutreos.Page;
import java.io.File;
import java.io.IOException;
import static java.util.Collections.list;
import java.util.LinkedList;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;



/**
 *
 * @author Beto Garcia
 */
public class Panel extends javax.swing.JFrame {

    final JFileChooser fc = new JFileChooser();

    /**
     * Creates new form Panel
     */
    
    private CutreOS kernel;
    private LinkedList<String> pagingAlgorithmList;
    private LinkedList<String> schedAlgorithmList;
    private int pagingAlgoIndex = 0;
    private int schedAlgoIndex = 0;
    public Panel() {
        kernel = new CutreOS();
        initComponents();
        getKernelAlgorithms();
        updateData();
    }

    private void getKernelAlgorithms(){
        //get paging list
        this.pagingAlgorithmList = kernel.getPagingList();
        //get scheduling algorithm list
        this.schedAlgorithmList = kernel.getSchedList();
        //get interrupt list
        LinkedList<String> interruptList = kernel.getInterrupts();
        this.interruptCombo.removeAllItems();
        for (String i: interruptList){
            this.interruptCombo.addItem(i);
        }
        currentPagingAlgoLabel.setText(kernel.getCurrentPagingAlgo());
        schedLabel.setText(kernel.getCurrentSched());
    }
    private void updateData(){
        cutreos.Process running = kernel.getRunning();
        currentTimeText.setText(Integer.toString(kernel.getTime()));
        if(running == null){
            JOptionPane.showMessageDialog(Panel.this, "no running procceses.");
        }else{
           currentProcessNameLabel.setText(running.getName());
           ActualTimeArriveText.setText(Integer.toString(running.getArriveTime()));
           ActualTimeAssignedCPUText.setText(Integer.toString(running.getRunning_time()));
           ActualTimeAgingText.setText(Integer.toString(running.getReady_time()));
           ActualTimeRemainingCPUText.setText(Integer.toString(running.getRemaining_time()));
           ActualTimeRemainingQuantumText.setText("0");
        }
        updateTable(running.getPages());
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        leftPanel = new javax.swing.JPanel();
        timePanel = new javax.swing.JPanel();
        AddFileButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        currentTimeText = new javax.swing.JTextField();
        currentProcessPanel = new javax.swing.JPanel();
        currentProcessNameLabel = new java.awt.Label();
        label2 = new java.awt.Label();
        ActualTimeArriveText = new javax.swing.JTextField();
        label3 = new java.awt.Label();
        ActualTimeAssignedCPUText = new javax.swing.JTextField();
        label4 = new java.awt.Label();
        ActualTimeAgingText = new javax.swing.JTextField();
        label6 = new java.awt.Label();
        ActualTimeRemainingCPUText = new javax.swing.JTextField();
        label7 = new java.awt.Label();
        ActualTimeRemainingQuantumText = new javax.swing.JTextField();
        runPageCombo = new javax.swing.JComboBox<>();
        runPageButton = new javax.swing.JButton();
        centerPanel = new javax.swing.JPanel();
        pagesPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        pageTable = new javax.swing.JTable();
        interruptPanel = new javax.swing.JPanel();
        interruptCombo = new javax.swing.JComboBox<>();
        interruptButton = new javax.swing.JButton();
        rightPanel = new javax.swing.JPanel();
        schedAlgoPanel = new javax.swing.JPanel();
        schedLabel = new javax.swing.JLabel();
        CPUchangeAlgorithmButton = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        Spinner = new javax.swing.JSpinner();
        memAlgoPanel = new javax.swing.JPanel();
        MemorybitsResetNURButton = new javax.swing.JButton();
        MemorychangeAlgorithmButton = new javax.swing.JButton();
        currentPagingAlgoLabel = new javax.swing.JLabel();
        createProcessPanel = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        NewProcessCreateButton = new javax.swing.JButton();
        newProcessNameText = new javax.swing.JTextField();
        newProcessPagesSpinner = new javax.swing.JSpinner();
        newProcessTotalExecutionText = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("OS Simulator™ CutreOS© · I ❤ OS");
        getContentPane().setLayout(new java.awt.GridBagLayout());

        leftPanel.setAlignmentX(0.0F);
        leftPanel.setName("Current process"); // NOI18N
        leftPanel.setRequestFocusEnabled(false);
        leftPanel.setLayout(new javax.swing.BoxLayout(leftPanel, javax.swing.BoxLayout.Y_AXIS));

        timePanel.setLayout(new java.awt.GridBagLayout());

        AddFileButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        AddFileButton.setText("Add File");
        AddFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddFileButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        timePanel.add(AddFileButton, gridBagConstraints);

        jLabel1.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        jLabel1.setText("Current time:");
        jLabel1.setToolTipText("");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        timePanel.add(jLabel1, gridBagConstraints);

        currentTimeText.setText("0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.ipady = 5;
        timePanel.add(currentTimeText, gridBagConstraints);

        leftPanel.add(timePanel);

        currentProcessPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Current process"));
        currentProcessPanel.setMinimumSize(new java.awt.Dimension(40, 80));
        java.awt.GridBagLayout currentProcessPanelLayout = new java.awt.GridBagLayout();
        currentProcessPanelLayout.columnWidths = new int[] {0, 5, 0};
        currentProcessPanelLayout.rowHeights = new int[] {0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0};
        currentProcessPanel.setLayout(currentProcessPanelLayout);

        currentProcessNameLabel.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        currentProcessNameLabel.setText("Name:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        currentProcessPanel.add(currentProcessNameLabel, gridBagConstraints);
        currentProcessNameLabel.getAccessibleContext().setAccessibleName("");

        label2.setText("Arrive:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        currentProcessPanel.add(label2, gridBagConstraints);
        label2.getAccessibleContext().setAccessibleName("");

        ActualTimeArriveText.setText("0");
        ActualTimeArriveText.setMinimumSize(new java.awt.Dimension(40, 80));
        ActualTimeArriveText.setPreferredSize(new java.awt.Dimension(40, 19));
        ActualTimeArriveText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ActualTimeArriveTextActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        currentProcessPanel.add(ActualTimeArriveText, gridBagConstraints);
        ActualTimeArriveText.getAccessibleContext().setAccessibleName("");

        label3.setText("Assigned CPU:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        currentProcessPanel.add(label3, gridBagConstraints);
        label3.getAccessibleContext().setAccessibleName("");

        ActualTimeAssignedCPUText.setText("0");
        ActualTimeAssignedCPUText.setMinimumSize(new java.awt.Dimension(40, 80));
        ActualTimeAssignedCPUText.setPreferredSize(new java.awt.Dimension(40, 19));
        ActualTimeAssignedCPUText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ActualTimeAssignedCPUTextActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        currentProcessPanel.add(ActualTimeAssignedCPUText, gridBagConstraints);
        ActualTimeAssignedCPUText.getAccessibleContext().setAccessibleName("");

        label4.setText("Aging:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        currentProcessPanel.add(label4, gridBagConstraints);
        label4.getAccessibleContext().setAccessibleName("");

        ActualTimeAgingText.setText("0");
        ActualTimeAgingText.setMinimumSize(new java.awt.Dimension(40, 80));
        ActualTimeAgingText.setPreferredSize(new java.awt.Dimension(40, 19));
        ActualTimeAgingText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ActualTimeAgingTextActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        currentProcessPanel.add(ActualTimeAgingText, gridBagConstraints);
        ActualTimeAgingText.getAccessibleContext().setAccessibleName("");

        label6.setText("Remaining CPU:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        currentProcessPanel.add(label6, gridBagConstraints);
        label6.getAccessibleContext().setAccessibleName("");

        ActualTimeRemainingCPUText.setText("0");
        ActualTimeRemainingCPUText.setMinimumSize(new java.awt.Dimension(40, 80));
        ActualTimeRemainingCPUText.setPreferredSize(new java.awt.Dimension(40, 19));
        ActualTimeRemainingCPUText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ActualTimeRemainingCPUTextActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        currentProcessPanel.add(ActualTimeRemainingCPUText, gridBagConstraints);
        ActualTimeRemainingCPUText.getAccessibleContext().setAccessibleName("");

        label7.setText("Remaining Quantum");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        currentProcessPanel.add(label7, gridBagConstraints);
        label7.getAccessibleContext().setAccessibleName("");

        ActualTimeRemainingQuantumText.setText("0");
        ActualTimeRemainingQuantumText.setMinimumSize(new java.awt.Dimension(40, 80));
        ActualTimeRemainingQuantumText.setPreferredSize(new java.awt.Dimension(40, 19));
        ActualTimeRemainingQuantumText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ActualTimeRemainingQuantumTextActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        currentProcessPanel.add(ActualTimeRemainingQuantumText, gridBagConstraints);
        ActualTimeRemainingQuantumText.getAccessibleContext().setAccessibleName("");

        runPageCombo.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                runPageComboInputMethodTextChanged(evt);
            }
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
        });
        runPageCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runPageComboActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_END;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        currentProcessPanel.add(runPageCombo, gridBagConstraints);

        runPageButton.setText("Run!");
        runPageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runPageButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_END;
        currentProcessPanel.add(runPageButton, gridBagConstraints);

        leftPanel.add(currentProcessPanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(leftPanel, gridBagConstraints);

        centerPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        centerPanel.setLayout(new javax.swing.BoxLayout(centerPanel, javax.swing.BoxLayout.PAGE_AXIS));

        pagesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Current process page table"));
        pagesPanel.setLayout(new java.awt.BorderLayout());

        pageTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                { new Integer(0), null,  new Integer(0),  new Integer(0),  new Integer(0), null, null}
            },
            new String [] {
                "#", "Resident", "Arrive", "Last access", "Access count", "Referenced", "Modified"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Boolean.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Boolean.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(pageTable);

        pagesPanel.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        centerPanel.add(pagesPanel);

        interruptPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Interrupt request"));

        interruptCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Interrupt?" }));
        interruptPanel.add(interruptCombo);

        interruptButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        interruptButton.setForeground(new java.awt.Color(255, 0, 153));
        interruptButton.setText("Interrupt");
        interruptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                interruptButtonActionPerformed(evt);
            }
        });
        interruptPanel.add(interruptButton);

        centerPanel.add(interruptPanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(centerPanel, gridBagConstraints);

        rightPanel.setLayout(new javax.swing.BoxLayout(rightPanel, javax.swing.BoxLayout.PAGE_AXIS));

        schedAlgoPanel.setBackground(new java.awt.Color(204, 204, 204));
        schedAlgoPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("CPU"));

        schedLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        schedLabel.setText("Mierda pura");

        CPUchangeAlgorithmButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        CPUchangeAlgorithmButton.setText("Change Algorithm");
        CPUchangeAlgorithmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cpuChangeAlgorithm(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel7.setText("Quantum Temp");

        javax.swing.GroupLayout schedAlgoPanelLayout = new javax.swing.GroupLayout(schedAlgoPanel);
        schedAlgoPanel.setLayout(schedAlgoPanelLayout);
        schedAlgoPanelLayout.setHorizontalGroup(
            schedAlgoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(schedAlgoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(schedAlgoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(schedAlgoPanelLayout.createSequentialGroup()
                        .addGroup(schedAlgoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CPUchangeAlgorithmButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(schedAlgoPanelLayout.createSequentialGroup()
                                .addComponent(schedLabel)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(schedAlgoPanelLayout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 104, Short.MAX_VALUE)
                        .addComponent(Spinner, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25))))
        );
        schedAlgoPanelLayout.setVerticalGroup(
            schedAlgoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(schedAlgoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(schedLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CPUchangeAlgorithmButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(schedAlgoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(schedAlgoPanelLayout.createSequentialGroup()
                        .addComponent(Spinner)
                        .addGap(6, 6, 6))))
        );

        rightPanel.add(schedAlgoPanel);

        memAlgoPanel.setBackground(new java.awt.Color(204, 204, 204));
        memAlgoPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Memory"));
        memAlgoPanel.setForeground(new java.awt.Color(204, 204, 204));

        MemorybitsResetNURButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        MemorybitsResetNURButton.setText("Bits Reset NUR");
        MemorybitsResetNURButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bitsReset(evt);
            }
        });

        MemorychangeAlgorithmButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        MemorychangeAlgorithmButton.setText("Change Algorithm");
        MemorychangeAlgorithmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeAlgorithm(evt);
            }
        });

        currentPagingAlgoLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        currentPagingAlgoLabel.setText("NUR");

        javax.swing.GroupLayout memAlgoPanelLayout = new javax.swing.GroupLayout(memAlgoPanel);
        memAlgoPanel.setLayout(memAlgoPanelLayout);
        memAlgoPanelLayout.setHorizontalGroup(
            memAlgoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(memAlgoPanelLayout.createSequentialGroup()
                .addGroup(memAlgoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(memAlgoPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(currentPagingAlgoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(memAlgoPanelLayout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addGroup(memAlgoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(MemorybitsResetNURButton, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(MemorychangeAlgorithmButton, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        memAlgoPanelLayout.setVerticalGroup(
            memAlgoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(memAlgoPanelLayout.createSequentialGroup()
                .addComponent(currentPagingAlgoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(MemorychangeAlgorithmButton, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(MemorybitsResetNURButton, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        rightPanel.add(memAlgoPanel);

        createProcessPanel.setBackground(new java.awt.Color(204, 204, 204));
        createProcessPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("New process"));
        createProcessPanel.setLayout(new java.awt.GridBagLayout());

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel9.setText("Name:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        createProcessPanel.add(jLabel9, gridBagConstraints);

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel10.setText("Total Execution:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        createProcessPanel.add(jLabel10, gridBagConstraints);

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel11.setText("Pages:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        createProcessPanel.add(jLabel11, gridBagConstraints);

        NewProcessCreateButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        NewProcessCreateButton.setText("Create!");
        NewProcessCreateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewProcessCreateButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 200;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        createProcessPanel.add(NewProcessCreateButton, gridBagConstraints);
        NewProcessCreateButton.getAccessibleContext().setAccessibleDescription("");

        newProcessNameText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newProcessNameTextActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        createProcessPanel.add(newProcessNameText, gridBagConstraints);

        newProcessPagesSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, 100, 1));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        createProcessPanel.add(newProcessPagesSpinner, gridBagConstraints);

        newProcessTotalExecutionText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newProcessTotalExecutionTextActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        createProcessPanel.add(newProcessTotalExecutionText, gridBagConstraints);

        rightPanel.add(createProcessPanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        getContentPane().add(rightPanel, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void changeAlgorithm(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeAlgorithm
        this.pagingAlgoIndex++;
        if(this.pagingAlgoIndex > pagingAlgorithmList.size()-1)
            pagingAlgoIndex = 0;
        kernel.setPagingAlgorithm(pagingAlgorithmList.get(pagingAlgoIndex));
        getKernelAlgorithms();

    }//GEN-LAST:event_changeAlgorithm

    private void bitsReset(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bitsReset
        kernel.resetNUR();
        updateData();
        getKernelAlgorithms();
    }//GEN-LAST:event_bitsReset

    private void ActualTimeArriveTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ActualTimeArriveTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ActualTimeArriveTextActionPerformed

    private void ActualTimeAssignedCPUTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ActualTimeAssignedCPUTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ActualTimeAssignedCPUTextActionPerformed

    private void ActualTimeAgingTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ActualTimeAgingTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ActualTimeAgingTextActionPerformed

    private void ActualTimeRemainingCPUTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ActualTimeRemainingCPUTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ActualTimeRemainingCPUTextActionPerformed

    private void ActualTimeRemainingQuantumTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ActualTimeRemainingQuantumTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ActualTimeRemainingQuantumTextActionPerformed

    private void cpuChangeAlgorithm(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cpuChangeAlgorithm
        this.schedAlgoIndex++;
        if(this.schedAlgoIndex > schedAlgorithmList.size()-1)
            schedAlgoIndex = 0;
        kernel.setSchedAlgorithm(schedAlgorithmList.get(schedAlgoIndex));
        getKernelAlgorithms();
    }//GEN-LAST:event_cpuChangeAlgorithm

    private void AddFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddFileButtonActionPerformed
        //the Add file button
        int returnVal = this.fc.showOpenDialog(Panel.this);
        
        if (returnVal == JFileChooser.APPROVE_OPTION){
            File file = fc.getSelectedFile();
            Parser parser = new Parser(file.getAbsolutePath());
            LinkedList<ProcessParsed> procs = null;
            
            try{
               procs = parser.parse();
            }catch (IOException e){
                System.out.println("Fuck");
                System.exit(-1);
            }
            int i = 0;
        for(ProcessParsed p: procs){
            i++;
            try{
                kernel.newProcess("Process " + Integer.toString(i), p.getArriveTime(), p.getEstimatedTime(), p.getNextState(), p.getPages() );
            }catch(cutreos.OSisFullException e){
                JOptionPane.showMessageDialog(Panel.this, "Operating system is full!\nProcess is not allowed to enter");
            }
        }
        this.updateData();
            
        }
    }//GEN-LAST:event_AddFileButtonActionPerformed

    private void interruptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_interruptButtonActionPerformed
        String interrupt = (String)interruptCombo.getSelectedItem();
        boolean success = kernel.interrupt(interrupt);
        if(success){
            updateData();
            getKernelAlgorithms();
        }else{
            JOptionPane.showMessageDialog(Panel.this, "Access denied!\nYou can't interrupt IDLE");
        }
    }//GEN-LAST:event_interruptButtonActionPerformed

    private void newProcessTotalExecutionTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newProcessTotalExecutionTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_newProcessTotalExecutionTextActionPerformed

    private void newProcessNameTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newProcessNameTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_newProcessNameTextActionPerformed

    private void NewProcessCreateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewProcessCreateButtonActionPerformed
        try{
            this.kernel.newProcess(this.newProcessNameText.getText(),
                    Integer.parseInt(this.newProcessTotalExecutionText.getText()),
                    (int) newProcessPagesSpinner.getValue());
        }catch(cutreos.OSisFullException e){
                JOptionPane.showMessageDialog(Panel.this, "Operating system is full!\nProcess is not allowed to enter");
        }
    }//GEN-LAST:event_NewProcessCreateButtonActionPerformed

    private void runPageComboInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_runPageComboInputMethodTextChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_runPageComboInputMethodTextChanged

    private void runPageComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runPageComboActionPerformed

    }//GEN-LAST:event_runPageComboActionPerformed

    private void runPageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runPageButtonActionPerformed
        int selected = runPageCombo.getSelectedIndex();
        if(selected >= 0){
            kernel.runPage(selected);
            getKernelAlgorithms();
            updateData();
        }
    }//GEN-LAST:event_runPageButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Panel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Panel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Panel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Panel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Panel().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ActualTimeAgingText;
    private javax.swing.JTextField ActualTimeArriveText;
    private javax.swing.JTextField ActualTimeAssignedCPUText;
    private javax.swing.JTextField ActualTimeRemainingCPUText;
    private javax.swing.JTextField ActualTimeRemainingQuantumText;
    private javax.swing.JButton AddFileButton;
    private javax.swing.JButton CPUchangeAlgorithmButton;
    private javax.swing.JButton MemorybitsResetNURButton;
    private javax.swing.JButton MemorychangeAlgorithmButton;
    private javax.swing.JButton NewProcessCreateButton;
    private javax.swing.JSpinner Spinner;
    private javax.swing.JPanel centerPanel;
    private javax.swing.JPanel createProcessPanel;
    private javax.swing.JLabel currentPagingAlgoLabel;
    private java.awt.Label currentProcessNameLabel;
    private javax.swing.JPanel currentProcessPanel;
    private javax.swing.JTextField currentTimeText;
    private javax.swing.JButton interruptButton;
    private javax.swing.JComboBox<String> interruptCombo;
    private javax.swing.JPanel interruptPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private java.awt.Label label2;
    private java.awt.Label label3;
    private java.awt.Label label4;
    private java.awt.Label label6;
    private java.awt.Label label7;
    private javax.swing.JPanel leftPanel;
    private javax.swing.JPanel memAlgoPanel;
    private javax.swing.JTextField newProcessNameText;
    private javax.swing.JSpinner newProcessPagesSpinner;
    private javax.swing.JTextField newProcessTotalExecutionText;
    private javax.swing.JTable pageTable;
    private javax.swing.JPanel pagesPanel;
    private javax.swing.JPanel rightPanel;
    private javax.swing.JButton runPageButton;
    private javax.swing.JComboBox<String> runPageCombo;
    private javax.swing.JPanel schedAlgoPanel;
    private javax.swing.JLabel schedLabel;
    private javax.swing.JPanel timePanel;
    // End of variables declaration//GEN-END:variables

    private void updateTable(LinkedList<Page> pages) {
        int pageNumber = 0;
        DefaultTableModel model = (DefaultTableModel) pageTable.getModel();
        model.setRowCount(0);
        
        runPageCombo.removeAllItems();

        for(Page page: pages){
            Object[] data = new Object[] {
                                pageNumber,
                                page.isResident(),
                                page.getArrive_time(),
                                page.getLast_access_time(),
                                page.getAccess_count(),
                                page.isReferenced(),
                                page.isModified()
                                };
            model.addRow(data);
            runPageCombo.addItem("Page ".concat(Integer.toString(pageNumber)));
            
            pageNumber++;
        }
            
    }
}
